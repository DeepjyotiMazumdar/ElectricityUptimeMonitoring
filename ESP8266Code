#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <ESP8266Ping.h>


#define ON_Board_LED 2  //--> Defining an On Board LED, used for indicators when the process of connecting to a wifi router

const char* ssid = "******"; //--> Your wifi name or SSID.
const char* password = "******"; //--> Your wifi password.


//----------------------------------------Host & httpsPort
const char* host = "script.google.com";
const int httpsPort = 443;
//----------------------------------------

WiFiClientSecure client; //--> Create a WiFiClientSecure object.

String GAS_ID = "************"; //--> spreadsheet script ID

// Device to ping (IP Address)
const char* pingAddress = "********";  // Replace with the device's IP to monitor

// Other settings
int pingCount = 5;  // Number of ping failures before marking the device as offline
bool offline = false;
unsigned long previousMillis = 0;
const long interval = 10000;  // Check every 10 seconds



void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  delay(500);

  WiFi.begin(ssid, password); //--> Connect to your WiFi router
  Serial.println("");
    
  pinMode(ON_Board_LED,OUTPUT); //--> On Board LED port Direction output
  digitalWrite(ON_Board_LED, HIGH); //--> Turn off Led On Board

  //----------------------------------------Wait for connection
  Serial.print("Connecting");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    //----------------------------------------Make the On Board Flashing LED on the process of connecting to the wifi router.
    digitalWrite(ON_Board_LED, LOW);
    delay(250);
    digitalWrite(ON_Board_LED, HIGH);
    delay(250);
    //----------------------------------------
  }
  //----------------------------------------
  digitalWrite(ON_Board_LED, HIGH); //--> Turn off the On Board LED when it is connected to the wifi router.
  Serial.println("");
  Serial.print("Successfully connected to : ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  Serial.println();
  //----------------------------------------

  client.setInsecure();
}

void loop() {
unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    if (Ping.ping(pingAddress)) {
      // If the device is online
      if (offline) {
        logEvent("Online");
        offline = false;
      }
    } else {
      // If ping failed
      if (!offline) {
        int failedPingCount = 0;

        // Retry ping multiple times
        for (int i = 0; i < pingCount; i++) {
          if (!Ping.ping(pingAddress)) {
            failedPingCount++;
          }
        }

        // If ping failed 5 times, mark device offline
        if (failedPingCount >= pingCount) {
          logEvent("Offline");
          offline = true;
        }
      }
    }
  }
}
 
  
// Subroutine for sending data to Google Sheets
  void logEvent(String status) {
  Serial.println("==========");
  Serial.print("connecting to ");
  Serial.println(host);
  
  //----------------------------------------Connect to Google host
  if (!client.connect(host, httpsPort)) {
    Serial.println("connection failed");
    return;
  }
  //----------------------------------------

  //----------------------------------------Processing data and sending data
  String timestamp = getTimestamp();
  String logEntry = timestamp + " - " + status;
  Serial.println(logEntry);

  String url = "/macros/s/" + GAS_ID + "/exec?status=" + status;
  Serial.print("requesting URL: ");
  Serial.println(url);

  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
         "Host: " + host + "\r\n" +
         "User-Agent: BuildFailureDetectorESP8266\r\n" +
         "Connection: close\r\n\r\n");

  Serial.println("request sent");
  //----------------------------------------

  //----------------------------------------Checking whether the data was sent successfully or not
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == "\r") {
      Serial.println("headers received");
      break;
    }
  }
  String line = client.readStringUntil('\n');
  if (line.startsWith("{\"state\":\"success\"")) {
    Serial.println("esp8266/Arduino CI successfull!");
  } else {
    Serial.println("esp8266/Arduino CI has failed");
  }
  Serial.print("reply was : ");
  Serial.println(line);
  Serial.println("closing connection");
  Serial.println("==========");
  Serial.println();
  //----------------------------------------
} 
String getTimestamp() {
  // Placeholder for real-time timestamp generation
  // In real scenarios, you may need to use NTP (Network Time Protocol) to get the actual time.
  return String(millis()/1000);
}
//==============================================================================
